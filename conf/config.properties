#JDBC host and port
#Database and Default port:
#IoTDB: 6667
#TimescaleDB: 5432
HOST=127.0.0.1
PORT=6667
#RESTful URL
#INFLUX_URL=http://127.0.0.1:8086
#OPENTSDB_URL=http://127.0.0.1:4242
#CTSDB_URL=http://10.104.27.14:9200
#KairosDB_URL=http://127.0.0.1:8080
DB_URL=http://127.0.0.1:8086
#Currently support databases:
#IoTDB
#InfluxDB
#OpenTSDB
#CTSDB
#KairosDB
#TimescaleDB
DB_SWITCH=IoTDB
#Database name, currently required in InfluxDB and TimescaleDB
DB_NAME=test
### benchmark运行模式选择参数 ###
#目前支持多种运行模式，分别为：
#testWithDefaultPath--常规测试模式，支持多种读和写操作的混合负载
#writeWithRealDataSet--写入真实数据集模式，需要配置 FILE_PATH 以及 DATA_SET
#queryWithRealDataSet--查询真实数据集模式，需要配置REAL_QUERY_START_TIME, REAL_QUERY_STOP_TIME, DATA_SET 以及 testWithDefaultPath模式下查询有关参数
#insertTestWithDefaultPath--重构前的纯写入模式
#queryTestWithDefaultPath--重构前的纯查询模式
#insertTestWithUserDefinedPath--样例数据生成模式
#serverMODE--服务器资源使用监控模式（该模式下运行通过ser-benchmark.sh脚本启动，无需手动配置该参数）
#importDataFromCSV--从CSV文件中读取数据模式
#executeSQLFromFile--从文件中读取SQL语句并依次一个一个提交执行
BENCHMARK_WORK_MODE=testWithDefaultPath
#各操作的比例,按照顺序 写:Q1:Q2:Q3:Q4:Q5:Q6:Q7:Q8 ,Qi表示QUERY_CHOICE=i时的查询操作。请注意使用英文冒号。比例中的每一项是number类型。
OPERATION_PROPORTION=2:0:0:0:0:0:0:0:0
#启动测试前是否清除旧数据(是否执行cleanup)
IS_DELETE_DATA=false
#MySQL Log
MYSQL_URL=jdbc:mysql://166.111.141.168:3306/benchmark_dev_test?user=root&password=Ise_Nel_2017&useUnicode=true&characterEncoding=UTF8&useSSL=false
#Use MySQL to store test data or not
IS_USE_MYSQL=false
#Save data model or not
IS_SAVE_DATAMODEL=false
#对本次实验的备注，作为表名的一部分存入mysql中，注意不要有.等特殊字符
REMARK=
#数据库的版本,测iotdb则自动填充HEAD的commit id#
VERSION=0.4.0
### client mode ###
### 写入测试相关参数
#客户端和设备是否绑定，若为false则客户端数可以大于设备数
IS_CLIENT_BIND=false
#客户端并发数，若客户端和设备绑定，则必须小于等于设备数
CLIENT_NUMBER=2
#存储组数，必须小于等于设备数
GROUP_NUMBER=5
#总设备数
DEVICE_NUMBER=20
#每个设备的传感器数，总时间序列条数=DEVICE_NUMBER*SENSOR_NUMBER
SENSOR_NUMBER=4
#批写入数据行数，每行是某个设备所有传感器在某一时间戳的数据，每个batch写入数据点数=SENSOR_NUMBER*BATCH_SIZE
BATCH_SIZE=1000
#每个客户端线程的操作数
LOOP=100
#时间戳间隔ms（非真实速率）
POINT_STEP=5000
#数据类型 KairosDB do not support float as data type
DATA_TYPE=DOUBLE
#编码方式
ENCODING=GORILLA
#生成数据的小数位数
NUMBER_OF_DECIMAL_DIGIT=2
#压缩方式 UNCOMPRESSOR | SNAPPY (仅对IoTDB有效)
COMPRESSOR=SNAPPY
#是否写入前先创建schema
CREATE_SCHEMA=true
#数据库初始化等待时间ms
INIT_WAIT_TIME=5000
#若运行模式为insertTestWithUserDefinedPath则表示生成样本数据SQL的文件路径，若路径不存在，视为不需要写入文件，否则自动新建一个名为sampleData.txt的文件并写入SQL语句
#若为testWithDefaultPath则表示DB engine生成数据所在路径
GEN_DATA_FILE_PATH=/home/liurui
#DB所在服务器中data文件和log_stop_flag所在路径
LOG_STOP_FLAG_PATH=/home/liurui/github/iotdb/iotdb
#/var/lib/influxdb
USE_OPS=false
#actual max insertion rate each client thread, unit: points/s
CLIENT_MAX_WRT_RATE=100000
#批写入中是否写多个设备,需满足批写入语句条数和客户端数的乘积可以被设备数整除
MUL_DEV_BATCH=false
#是否为乱序插入模式
IS_OVERFLOW=false
#支持多种乱序模式:
#0--批插入乱序模式
#1--全局乱序模式
#2--时间戳可重复模式
OVERFLOW_MODE=2
#批插入乱序比例，该参数取值范围(0,1)
OVERFLOW_RATIO=0.5
#Possion Distribution Related in overflow mode 2
#the expectation and variance of Possion Distribution based on basic model
LAMBDA=2200.0
#the max K of possion random variable based on basic model
MAX_K=170000
#is use random timestamp interval
IS_RANDOM_TIMESTAMP_INTERVAL=false
#startTime Index， actual timestamp = 2017-11-1T00:00:00+08:00 + START_TIMESTAMP_INDEX * POINT_STEP
START_TIMESTAMP_INDEX=20
DATA_SEED=666
LINE_RATIO=1
SIN_RATIO=1
SQUARE_RATIO=1
RANDOM_RATIO=1
CONSTANT_RATIO=1
### 查询测试相关参数###
#QUERY_CHOICE目前支持的查询分别为：
#1--精确点查询 select v1... from data where time = ? and device in ?
#2--范围查询（只限制起止时间）select v1... from data where time > ? and time < ? and device in ?
#3--带值过滤的范围查询 select v1... from data where time > ? and time < ? and v1 > ? and device in ?
#4--带时间过滤的聚合查询 select func(v1)... from data where device in ? and time > ? and time < ?
#5--带值过滤的聚合查询 select func(v1)... from data where device in ? and value > ?
#6--带值过滤和时间过滤的聚合查询 select func(v1)... from data where device in ? and value > ? and time > ? and time < ?
#7--分组聚合查询（GROUP BY）（暂时只能生成有一个时间区间的语句）
#8--最近点查询 select time, v1... where device = ? and time = max(time)
QUERY_CHOICE=7
#每条查询语句中查询涉及的传感器数量
QUERY_SENSOR_NUM=1
#每条查询语句中查询涉及的设备数量
QUERY_DEVICE_NUM=1
#查询随机种子
QUERY_SEED=151658
#当聚合查询时，其中的聚合函数通过QUERY_AGGREGATE_FUN参数设置
QUERY_AGGREGATE_FUN=count
#时间过滤条件的时间起点变化步长, 若设为0则每个查询的时间过滤条件是一样的
STEP_SIZE=1
#带起止时间的查询中开始时间与结束时间之间的时间间隔(单位为ms)以及groupBy中的时间间隔
QUERY_INTERVAL=250000
#条件查询的参数
QUERY_LOWER_LIMIT=-5
#精确点查询中查询结果是否为空
IS_EMPTY_PRECISE_POINT_QUERY=false
#做groupBy查询中查询的分组大小，(单位为ms)
TIME_UNIT=20000
#查询语句中limit子句的模式
#0--无limit子句
#1--limit子句仅包含limit
#2--limit子句仅包含slimit
#3--limit子句含limit和slimit
LIMIT_CLAUSE_MODE=0
#带limit的条件查询中的最大输出条数
QUERY_LIMIT_N=5
#带limit的条件查询中的偏移量
QUERY_LIMIT_OFFSET=5
#最大输出序列数
QUERY_SLIMIT_N=5
#序列的偏移量
QUERY_SLIMIT_OFFSET=5
###### import data from CSV file ######
IMPORT_DATA_FILE_PATH=
METADATA_FILE_PATH=
BATCH_EXECUTE_COUNT=5000
###server mode###
#系统性能检测网卡设备名
NET_DEVICE=e
#INTERVAL=n表示系统信息记录间隔为n+2秒
INTERVAL=0
#将系统性能信息写入文件，如果不赋值则不写入文件
SERVER_MODE_INFO_FILE=
###generate sample data###
#存储组名，必须包含根路径root
STORAGE_GROUP_NAME=root.sgcc
#设备及传感器名，与存储组名组成一个完整的路径
TIMESERIES_NAME=wf03.wt01.temperature
#时序类型
TIMESERIES_TYPE=INT32
#时序数据取值范围，用逗号隔开
TIMESERIES_VALUE_SCOPE=13,16
#Other Mode Jenkins related
#上一次结果的日志路径
LAST_RESULT_PATH=/var/lib/jenkins/workspace/IoTDBWeeklyTest/iotdb-benchmark/logs
#存放SQL语句文件的完整路径
SQL_FILE=/var/lib/jenkins/workspace/IoTDBWeeklyTest/iotdb-benchmark/SQLFile
###read file mode
READ_FROM_FILE=false
FILE_PATH=data/geolife/
### REDD, TDRIVE, GEOLIFE
DATA_SET=GEOLIFE
REAL_QUERY_START_TIME=1303132929000
REAL_QUERY_STOP_TIME=1303132946000


TAG_PATH=true
#1: set each measurement as a storage group, 2: set each path as a storage group
STORE_MODE=2
BATCH_OP_NUM=5000
### the following params never used in current version
POINT_LOSE_RATIO=0.01
SIMPLE_QUERY_RATIO=0.2
MAX_QUERY_RATIO=0.2
MIN_QUERY_RATIO=0.2
AVG_QUERY_RATIO=0.2
COUNT_QUERY_RATIO=0.2
SUM_QUERY_RATIO=0.2
RANDOM_INSERT_RATIO=0.2
UPDATE_RATIO=0.2

