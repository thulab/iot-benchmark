/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package cn.edu.tsinghua.iot.benchmark.client.generate;

import cn.edu.tsinghua.iot.benchmark.client.DataClient;
import cn.edu.tsinghua.iot.benchmark.distribution.ProbTool;
import cn.edu.tsinghua.iot.benchmark.entity.Batch;
import cn.edu.tsinghua.iot.benchmark.schema.MetaUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Random;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;

/**
 * Responsible for writing and querying generate data. The order and number of operation(e.g.
 * ingestion) are determined by OperationController. The specific query and written data are
 * generated by SyntheticDataWorkload
 */
public abstract class GenerateBaseClient extends DataClient implements Runnable {

  protected static final Logger LOGGER = LoggerFactory.getLogger(GenerateBaseClient.class);
  protected final ProbTool probTool = new ProbTool();
  protected final Random alignRandom = new Random(config.getDATA_SEED());

  /** Insert Loop Index, using for data insertion */
  protected long insertLoopIndex;
  /** Actual deviceFloor */
  protected int actualDeviceFloor;

  public GenerateBaseClient(int id, CountDownLatch countDownLatch, CyclicBarrier barrier) {
    super(id, countDownLatch, barrier);
    insertLoopIndex = 0;
    actualDeviceFloor = (int) (config.getDEVICE_NUMBER() * config.getREAL_INSERT_RATE());
    actualDeviceFloor = MetaUtil.getDeviceId(actualDeviceFloor);
  }

  @Override
  protected void initDBWrappers() {
    super.initDBWrappers();
    this.totalLoop = config.getLOOP();
  }

  /** Check whether write batch */
  protected boolean checkBatch(Batch batch) {
    if (batch.getDeviceSchema().getDeviceId() > actualDeviceFloor) {
      return false;
    }
    if (!config.isIS_SENSOR_TS_ALIGNMENT()) {
      return probTool.returnTrueByProb(config.getTS_ALIGNMENT_RATIO(), alignRandom);
    }
    return true;
  }
}
